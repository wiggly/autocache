# default strategy
autocache.default_strategy = global

# Functions

autocache.fn.Foo.ditty = refresh_memd
autocache.fn.Repository.Core.Location.find_all_sites = refresh_memd
autocache.fn.Repository.Core.Location.find_all_countries = refresh_memd
autocache.fn.Repository.Core.Location.find_child_locations_of_site_by_id_and_type = refresh_memd

# Strategies

# small objects we want to hold on to and do not require refreshing
autocache.strategy.global = Autocache::Strategy::Simple
autocache.strategy.global.store = process_small

# objects we want to store in memcached and have refreshed
autocache.strategy.refresh_memd = Autocache::Strategy::Refresh
autocache.strategy.refresh_memd.base_strategy = global

# objects we want to store in-process and have refreshed
autocache.strategy.refresh_mem = Autocache::Strategy::Refresh
autocache.strategy.refresh_mem.store = process_large

# Stores

# cache for small things we intend to retain forever
autocache.store.process_small = Autocache::Store::Memory

# store that can handle a certain amount of memory and evicts with an LRU
# algorithm
autocache.store.process_lru = Autocache::Store::LRU
autocache.store.process_lru.size = 1024

# cache for larger objects that we want to maintain a hot window on
autocache.store.process_large = Autocache::Store::MemoryLRU
autocache.store.process_large.size = 1000

# cache that uses an external memcached service
autocache.store.memcached = Autocache::Store::Memcached
autocache.store.memcached.servers = 127.0.0.1:2300
autocache.store.memcached.compress_threshold = 10000
